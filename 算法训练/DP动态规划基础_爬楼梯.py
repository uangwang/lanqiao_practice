# 一个台阶：1种
# 两个台阶：2种 1+1 2
# 三个台阶：3种 1+1+1 1+2 2+1
# 四个台阶：5种 1+1+1+1 1+1+2 1+2+1 2+1+1 2+2
# 五个台阶：8种 1+1+1+1+1 1+1+1+2 1+1+2+1 1+2+1+1 2+1+1+1 1+2+2 2+1+2 2+2+1
# 规律：f(n) = f(n-1) + f(n-2)
"""
原问题：有n个台阶，每次可以走1步或2步，共有多少种走法
子问题：有n-1个台阶，每次可以走1步或2步，共有多少种走法
最优子结构：f(n) = f(n-1) + f(n-2)
边界：f(1) = 1 f(2) = 2
无后效性：f(n)只与f(n-1)和f(n-2)有关，最优子结构满足无后效性

dp[n]表示有n个台阶的走法
dp[1] = 1
dp[2] = 2
dp[n] = dp[n-1] + dp[n-2] 状态转移方程
"""

# DP动态规划基础_爬楼梯
from functools import lru_cache

@lru_cache(None)
def dp(x):
    if x == 1:
        return 1
    if x == 2:
        return 2
    return dp(x-1) + dp(x-2)

n = int(input())
print(dp(n))